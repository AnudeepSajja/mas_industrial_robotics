#!/usr/bin/env python

PACKAGE = 'mir_object_recognition'
NODE = 'pcl_object_recognizer'

class_label = {
            0: 'AXIS',
            1: 'BEARING',
            2: 'BEARING_BOX',
            3: 'CONTAINER_BOX_BLUE',
            4: 'CONTAINER_BOX_RED',
            5: 'DISTANCE_TUBE',
            6: 'F20_20_B',
            7: 'F20_20_G',
            8: 'M20',
            9: 'M20_100',
            10: 'M30',
            11: 'MOTOR',
            12: 'R20',
            13: 'S40_40_B',
            14: 'S40_40_G'
        }

import os
import struct
import colorsys
import importlib
import numpy as np

import pcl
import roslib
import rospy

from pcl_object_recognition.feature_based_classifiers import FeatureBasedClassifiers
from pcl_object_recognition.utils.features import FVRDDFeatureExtraction
from pcl_object_recognition.cnn_based_classifiers import CNNBasedClassifiers
from pcl_object_recognition.dgcnn_classifier import DGCNNClassifier
import pcl_object_recognition.utils.pc_utils as pc_utils

from mas_perception_msgs.msg import ObjectList
import sensor_msgs.point_cloud2

class PointcloudObjectRecognizer():
    """
    PointCloud object recognizer class

    :param model:       Model name (featured_based / cnn_based)
    :param model_id:    Model id (FVRDD / RDD or DGCNN)
    :param dataset:     Dataset
    :param ngaussians:  Number of gaussians of FV
    :param variance:    Variance of gmm model for FV
    """

    def __init__(self, model, model_id, dataset, ngaussians=2, variance=0.05):
        self.model = model
        self.model_id = model_id
        self.dataset = model_id + "_" + dataset
        self.cfg_folder = os.path.join(roslib.packages.get_pkg_dir(PACKAGE), 'common', 'config')

        # Subscriber and publisher
        self.sub = rospy.Subscriber("input/object_list",ObjectList, self.recognize_object_topic_cb)
        self.pub = rospy.Publisher("output/object_list",ObjectList, queue_size=1)

        if self.model == "feature_based":        
            self.feature_extraction = FVRDDFeatureExtraction(self.model_id)
            self.fe_method = self.feature_extraction.get_method()
            if model_id == "FVRDD":
                self.gmm = pc_utils.get_3d_grid_gmm(subdivisions=[ngaussians, ngaussians, ngaussians], variance=variance)
                self.feature_extraction.set_fv_params(self.gmm, use_rdd=True)
            elif model_id == "RDD":
                self.feature_extraction.set_rdd_params(color=True)
            
            classifier_file = os.path.join(self.cfg_folder, self.dataset, 'classifier.pkl')
            label_encoder = os.path.join(self.cfg_folder, self.dataset, 'label_encoder.pkl')
            self.classifier = FeatureBasedClassifiers(classifier_file, label_encoder)

        elif self.model == "cnn_based":
            self.checkpoint_file = os.path.join(self.cfg_folder, self.dataset, 'model.ckpt')
            module_name = "pcl_object_recognition" + "." + self.model_id.lower()+"_"+"classifier"
            class_name = self.model_id.upper()+"Classifier"
            ClassifierClass = getattr(importlib.import_module(module_name), class_name)
            self.classifier = ClassifierClass(checkpoint_path=self.checkpoint_file, num_classes=15, num_points=2048, cloud_dim=6)

    def recognize_object_topic_cb(self, object_data):
        """
        Reocgnize object callback

        :param object_data:     Object list
        :type:                  mas_perception_msgs/object_list
        """
        if object_data.objects:
            rospy.loginfo("%d clouds received ", len(object_data.objects))
            result_object_list = ObjectList()
            result_object_list = object_data.objects
            for object in result_object_list:
                if self.model == "feature_based":
                    cloud = self.extract_pointcloud(object.pointcloud, color="hsv")
                    features = self.fe_method(cloud)
                    features = np.reshape(features, (1,-1))
                    label, probability = self.classifier.classify(features)
                    label = label[0]
                elif self.model == "cnn_based":
                    cloud = self.extract_pointcloud(object.pointcloud, color="rgb")
                    label, probability = self.classifier.classify(cloud, center=False, rotate=True, pad=True)
                    label = class_label[label]

                object.name = label
                object.probability = probability

            self.pub.publish(result_object_list)

    def extract_pointcloud(self, pc, color="hsv"):
        """
        Generator for x,y,z,rgb fields from pointcloud

        :param pc:      The input pointcloud
        :param color:   The choice of color (hsv/rgb)

        :return:        Extracted pointcloud
        """
        xyzrgb_gen = sensor_msgs.point_cloud2.read_points(pc, skip_nans=False, field_names=("x", "y", "z", "rgb"))

        pointcloud = [list(elem) for elem in list(xyzrgb_gen)]
        pointcloud = np.array(pointcloud)
        float_rgb = pointcloud[:,3][np.newaxis].T

        # Convert float rgb to hsv/rgb
        if color == "hsv":
            pc_color = np.array([list(colorsys.rgb_to_hsv(*pc_utils.float_to_rgb(frgb))) for frgb in float_rgb])
        elif color == "rgb":
            pc_color = np.array([list(pc_utils.float_to_rgb(frgb)) for frgb in float_rgb])

        pointcloud = np.hstack([pointcloud[:,0:3], pc_color])

        return pointcloud

if __name__ == '__main__':
    rospy.init_node(NODE)
    model = rospy.get_param("~model")
    model_id = rospy.get_param("~model_id")
    dataset = rospy.get_param("~dataset")
    object_recognizer = PointcloudObjectRecognizer(model, model_id, dataset)
    rospy.loginfo('\033[92m'+"PCL Recognizer is ready using: %s , model: %s ", model, model_id)
    rospy.spin()