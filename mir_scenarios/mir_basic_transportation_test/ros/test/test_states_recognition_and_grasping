#!/usr/bin/python

import rospy

import smach
import smach_ros

import math

# import of generic states
# generic states
import mir_states.common.basic_states as gbs_o
##import mir_states.common.robocup_states as grs_o
import mir_states.common.navigation_states as gns_o
import mir_states.common.manipulation_states as gms_o
import mir_states.common.perception_states as gps_o


import mir_states.robocup.basic_transportation_test_states as btts
import mir_states.robocup.referee_box_states as refbox

#### IMPORT SOME NEW STATES!! ###
import mir_states.common.basic_states as gbs 

import mir_states.common.perception_mockup_util as perception_mockup_util
from mcr_perception_msgs.msg import ObjectList, Object

# main
def main():
    rospy.init_node('basic_transportation_test')

    SM = smach.StateMachine(outcomes=['done'])
    
    # world knowledge
    SM.userdata.task_list = []
    
    SM.userdata.simulation = True
    SM.userdata.test = "BTT"
    
    SM.userdata.base_pose_to_approach = 0
    SM.userdata.lasttask = btts.Bunch(location="", obj_names="")
    SM.userdata.current_task_index = 0
    SM.userdata.recognized_objects = []
    SM.userdata.object_to_be_adjust_to = 0
   
    SM.userdata.objects_to_be_grasped = 0
    SM.userdata.object_to_grasp = 0
    SM.userdata.move_arm_to = 0
    SM.userdata.move_base_by = 0
    

    SM.userdata.rear_platform_free_poses = []
    SM.userdata.rear_platform_free_poses.append(btts.Bunch(obj_name="", platform_pose='platform_right'))
    SM.userdata.rear_platform_free_poses.append(btts.Bunch(obj_name="", platform_pose='platform_middle'))
    SM.userdata.rear_platform_free_poses.append(btts.Bunch(obj_name="", platform_pose='platform_left'))

    SM.userdata.rear_platform_occupied_poses = []
    SM.userdata.obj_goal_configuration_poses = []
    SM.userdata.destinaton_free_poses = []
    SM.userdata.source_visits = []

    SM.userdata.vscount = 0
    
     # open the container
    with SM:
        '''
        smach.StateMachine.add('INIT_ROBOT', gbs_o.init_robot(),
            transitions={'succeeded':'GET_TASK'})
        

        smach.StateMachine.add('GET_TASK', refbox.get_basic_transportation_task(),
            transitions={'task_received':'SETUP_BTT',
                         'wrong_task_format':'GET_TASK'})

        smach.StateMachine.add('SETUP_BTT', btts.setup_btt(),
            transitions={'success':'SELECT_SOURCE_SUBTASK'})      
            
        smach.StateMachine.add('SELECT_SOURCE_SUBTASK', btts.select_btt_subtask(type="source"),
            transitions={'task_selected':'MOVE_ARM',
                         'no_more_task_for_given_type':'done'})

        smach.StateMachine.add('MOVE_ARM', gms_o.move_arm("out_of_view"),
            transitions={'succeeded':'RECOGNIZE_OBJECTS',
                         'failed':'MOVE_ARM'})


        smach.StateMachine.add('RECOGNIZE_OBJECTS', gps_o.find_objects(frame_id='/odom'),
            transitions={'objects_found':'SELECT_OBJECT_TO_BE_GRASPED',
                        'no_objects_found':'RECOGNIZE_OBJECTS_LOOP',
                        'srv_call_failed':'RECOGNIZE_OBJECTS'},
            remapping={'found_objects':'recognized_objects'})

        #FIXME: Is there a loop reset?
        smach.StateMachine.add('RECOGNIZE_OBJECTS_LOOP', gbs.loop_for(2),
                                  transitions={'loop': 'RECOGNIZE_OBJECTS',
#                                               'continue': 'SKIP_SOURCE_POSE'})
                                               'continue': 'RECOGNIZE_OBJECTS'})

        smach.StateMachine.add('SELECT_OBJECT_TO_BE_GRASPED', btts.select_object_to_be_grasped(),
            transitions={'obj_selected':'COMPUTE_BASE_SHIFT_TO_OBJECT',
                        'no_obj_selected':'done',
                        'no_more_free_poses_at_robot_platf':'done'})

        # new states
        # select object --> compute base position -> move relative -> pregrasp -> move arm ->do vs
        smach.StateMachine.add('COMPUTE_BASE_SHIFT_TO_OBJECT', btts.compute_base_shift_to_object(),
            transitions={'succeeded': 'MOVE_BASE_RELATIVE',
                         'tf_error': 'done'},
            remapping={'object_pose':'object_to_grasp'})


        smach.StateMachine.add('MOVE_BASE_RELATIVE', gns_o.move_base_relative(),
            transitions={'succeeded': 'COMPUTE_PREGRASP_POSE',
                         'timeout': 'done'})

               
        smach.StateMachine.add('COMPUTE_PREGRASP_POSE', gms_o.compute_pregrasp_pose(),
        transitions={'succeeded':'MOVE_ARM_TO_PREGRASP',
                     'tf_transform_failed':'done'},
        remapping={'object_pose':'object_to_grasp'})      

        #smach.StateMachine.add('AVOID_WALLS_PRE', gms_o.move_arm('candle'),
        #    transitions={'succeeded': 'MOVE_ARM_TO_PREGRASP',
        #                'failed': 'AVOID_WALLS_PRE'})

        '''
        smach.StateMachine.add('MOVE_ARM_TO_PREGRASP', gms_o.move_arm([0.45, 0.0, 0.20, 0, (math.pi * 0.8), 0.0, '/base_link']),
            transitions={'succeeded': 'done',
                        'failed': 'done'})

        '''                        
        # state skipped
        smach.StateMachine.add('DO_VISUAL_SERVERING', gps_o.do_visual_servoing(),
            transitions={'succeeded':'GRASP_OBJ',
                        'failed':'SKIP_SOURCE_POSE',
                        'timeout':'VISUAL_SERVOING_LOOP',
                        'lost_object': 'VISUAL_SERVOING_LOOP'})

        smach.StateMachine.add('VISUAL_SERVOING_LOOP', btts.loop_for(),
                                  transitions={'loop': 'MOVE_ARM_TO_PREGRASP',
                                               'continue': 'SKIP_SOURCE_POSE'})
        
         '''
       
       
    # Start SMACH viewer
    smach_viewer = smach_ros.IntrospectionServer('PERCEPTION_GRASPING_TEST', SM, 'PERCEPTION_GRASPING_TEST')
    smach_viewer.start()

    result = SM.execute()

    # stop SMACH viewer
    while (result is None):
        rospy.spin()
    rospy.loginfo('perception grasping test is Done.')
    # smach_thread.stop()
    smach_viewer.stop()

if __name__ == '__main__':
    main()
