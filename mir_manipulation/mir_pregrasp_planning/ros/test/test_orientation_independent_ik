#!/usr/bin/env python

from __future__ import print_function

import tf
import rospy

from brics_actuator.msg import JointPositions
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped, Pose, Quaternion

from mir_pregrasp_planning_ros.orientation_independent_ik import OrientationIndependentIK
from mir_pregrasp_planning_ros.kinematics import Kinematics

MOVEIT_CONF_PUB = None
MOVEIT_TRIGGER_PUB = None

def send_arm_to_joint(joint_msg):
    rospy.loginfo('Found solution')
    rospy.loginfo(joint_msg)

    rospy.loginfo('Sending arm to point')
    MOVEIT_CONF_PUB.publish(joint_msg)
    rospy.sleep(1.0)

    MOVEIT_TRIGGER_PUB.publish(String(data='e_start'))
    rospy.sleep(1.0)
    rospy.loginfo('Test successful')

def main():
    global MOVEIT_CONF_PUB, MOVEIT_TRIGGER_PUB
    MOVEIT_CONF_PUB = rospy.Publisher('/arm_moveit_client/target_configuration',
                                      JointPositions, queue_size=1)
    MOVEIT_TRIGGER_PUB = rospy.Publisher('/arm_moveit_client/event_in',
                                         String, queue_size=1)
    ik_solver = OrientationIndependentIK(debug=True)
    rospy.sleep(0.5)
    rospy.loginfo('Initialised')

    goal = (0.65, 0.1, 0.1, 'base_link')
    print('Goal:', goal)
    joint_msg = ik_solver.get_joint_msg_from_point(*goal)
    if joint_msg is None:
        rospy.logerr('Test failed. Could not find IK solution')
        # return
    # send_arm_to_joint(joint_msg)
    # rospy.sleep(5.0)

    # goal = (0.65, 0.1, 0.1, -60.0, 10.0, 'base_link')
    # print('Goal:', goal)
    # joint_msg = ik_solver.get_joint_msg_from_point_and_pitch(*goal) 
    # if joint_msg is None:
    #     rospy.logerr('Test failed. Could not find IK solution')
    #     return
    # send_arm_to_joint(joint_msg)
    rospy.spin()

# def main():
#     kinematics = Kinematics()
#     pose = Pose()
#     pose.position.x = 0.65
#     pose.position.y = 0.0
#     pose.position.z = 0.1
#     pose.orientation = Quaternion(*tf.transformations.quaternion_from_euler(3.14, 0.5, 3.14))
#     # ik_answer = [2.16, 2.08, -1.91, 2.84, 2.91]

#     ik_solution = kinematics.inverse_kinematics(pose)
#     fk_pose = kinematics.forward_kinematics(ik_solution)

#     threshold = 0.001
#     assert abs(pose.position.x - fk_pose.position.x) < threshold
#     assert abs(pose.position.y - fk_pose.position.y) < threshold
#     assert abs(pose.position.z - fk_pose.position.z) < threshold
#     assert abs(pose.orientation.x - fk_pose.orientation.x) < threshold
#     assert abs(pose.orientation.y - fk_pose.orientation.y) < threshold
#     assert abs(pose.orientation.z - fk_pose.orientation.z) < threshold
#     assert abs(pose.orientation.w - fk_pose.orientation.w) < threshold
#     print('Test PASSED')

if __name__ == '__main__':
    rospy.init_node('test_node')
    main()
